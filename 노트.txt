async와 await를 사용한 C# 비동기 프로그래밍

동기 프로그램을 먼저 생성 후 이를 비동기 프로그램으로 변경하는 과정을 살펴봅니다.

저녁 식사 준비에 대한 동기 프로그래밍과 비동기 프로그래밍에 대한 절차는 다음과 같이 구분할 수 있습니다.

동기 프로그래밍(스레드 차단)
1. 밥을 만듭니다. 그리고 밥이 다 만들어질 때까지 보면서 기다립니다.
2. 국을 만듭니다. 그리고 국이 다 만들어질 때까지 보면서 기다립니다. 
3. 달걀 프라이를 만듭니다. 그리고 달걀 프라이가 다 만들어질 때까지 보면서 기다립니다. 

비동기 프로그래밍(동기 프로그래밍 포함)
1. 밥을 만듭니다. 그리고 밥이 다 만들어질 때까지 다른 일을 하면서(TV 등을 보면서) 기다립니다.
2. 국을 만듭니다. 그리고 국이 다 만들어질 때까지 다른 일을 하면서(TV 등을 보면서) 기다립니다. 
3. 달걀 프라이를 만듭니다. 그리고 달걀 프라이가 다 만들어질 때까지 다른 일을 하면서(TV 등을 보면서) 기다립니다. 

비동기 프로그래밍(동시 작업 시작)
밥을 만들기 시작합니다. 국을 만들기 시작합니다. 달걀 프라이를 만들기 시작합니다. 
(TV 등을 보면서) 다 끝날 때까지 기다립니다.

일반적으로 동기 프로그래밍은 1 + 2 + 3의 시간이 걸리고 

비동기 프로그래밍(동기와 비슷한)은 동기 프로그래밍과 동일한 시간이 걸립니다. 

비동기 프로그래밍은 (1, 2, 3) 중에서 가장 오래 걸리는 시간 + 알파 정도의 시간이 걸립니다.


따라하기 0: 솔루션 및 프로젝트 생성

(1) Dinner 이름으로 빈 솔루션을 생성합니다. 

(2) Dinner 솔루션에 Dinner.Common 이름으로 닷넷 스탠다드 2.0 프로젝트를 생성합니다. 기본적으로 생성된 Class1.cs 파일은 삭제합니다.

(3) Dinner.Common 프로젝트에 Cooking.cs 이름으로 클래스 파일을 생성하고 다음과 같이 코드를 작성합니다.


따라하기 1: 동기 프로그램 작성

(1) Dinner 솔루션에 Dinner.Sync 이름의 콘솔 응용프로그램을 생성합니다. 

(2) Dinner.Sync에 Dinner.Common 프로젝트에 대한 참조를 추가합니다.

(3) Dinner.Sync 프로젝트의 Program.cs에 다음과 같이 코드를 작성합니다. 


참고 1: Windows Forms에서 동기 프로그램 작동 방식 확인

(1) Dinner 솔루션에 Dinner.Sync.WindowsForms 이름의 Windows Forms 프로젝트를 추가합니다.


따라하기 2: 비동기 프로그램 작성(동기 프로그램 포함)

(1) Dinner 솔루션에 Dinner.Async 이름의 닷넷 코어 기반의 콘솔 응용프로그램 프로젝트를 추가합니다.


참고 2: WPF에서 비동기 프로그램 작동 방식 확인

(1) Dinner 솔루션에 Dinner.Async.Wpf 이름의 WPF 프로젝트를 추가합니다.


따라하기 3: 비동기 프로그램 작성

(1) Dinner 솔루션에 Dinner 이름의 닷넷 코어 기반의 콘솔 응용프로그램 프로젝트를 추가합니다.







